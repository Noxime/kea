//! Keyboard API

use super::Digital;

/// Event generated by the keyboard
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum Event {
    Up(Key),
    Down(Key),
    /// A properly translated text input. If you are implementing a text input
    /// in your game, you want to use this, as it respects keymappings and
    /// should be closest to the truth
    Text(char),
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
#[repr(usize)]
pub enum Key {
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    Snapshot,
    Scroll,
    Pause,
    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,
    Left,
    Up,
    Right,
    Down,
    Back,
    Enter,
    Space,
    Compose,
    Caret,
    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    AbntC1,
    AbntC2,
    Add,
    Apostrophe,
    Apps,
    At,
    Ax,
    Backslash,
    Calculator,
    Capital,
    Colon,
    Comma,
    Convert,
    Decimal,
    Divide,
    Equals,
    Grave,
    Kana,
    Kanji,
    LAlt,
    LBracket,
    LCtrl,
    LShift,
    LMode,
    Mail,
    MediaSelect,
    MediaStop,
    Minus,
    Multiply,
    Mute,
    MyComputer,
    NavigateForward,
    NavigateBackward,
    NextTrack,
    NoConvert,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    OEM102,
    Period,
    PlayPause,
    Power,
    PrevTrack,
    RAlt,
    RBracket,
    RCtrl,
    RShift,
    RMode,
    Semicolon,
    Slash,
    Sleep,
    Stop,
    Subtract,
    Sysrq,
    Tab,
    Underline,
    Unlabeled,
    VolumeDown,
    VolumeUp,
    Wake,
    WebBack,
    WebFavorites,
    WebForward,
    WebHome,
    WebRefresh,
    WebSearch,
    WebStop,
    Yen,
    Copy,
    Paste,
    Cut,
}

/// Current state of the keyboard modifiers
///
/// Using this prevents bugs when tracking modifier state through events
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub struct Mods {
    pub left_shift: Digital,
    pub left_ctrl: Digital,
    pub left_alt: Digital,
    pub left_mode: Digital,

    pub right_shift: Digital,
    pub right_ctrl: Digital,
    pub right_alt: Digital,
    pub right_mode: Digital,
}

impl Mods {
    /// Treat left and right shift keys as the same key
    pub fn shift(&self) -> Digital {
        super::combined([self.left_shift, self.right_shift].iter().cloned())
    }

    /// Treat left and right control keys as the same key
    pub fn ctrl(&self) -> Digital {
        super::combined([self.left_ctrl, self.right_ctrl].iter().cloned())
    }

    /// Treat left and right alt keys as the same key
    pub fn alt(&self) -> Digital {
        super::combined([self.left_alt, self.right_alt].iter().cloned())
    }

    /// Treat left and right mode keys as the same key
    pub fn mode(&self) -> Digital {
        super::combined([self.left_mode, self.right_mode].iter().cloned())
    }
}
